# -*- coding: utf-8 -*-
"""CaseStudiesAiLabPandas.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/15up7388t6xAvJAdB-qmpUIvCVupUJCEr

#Weather Data Analysis

You are given a dataset containing daily weather information for a city over the
last year. The dataset contains columns such as Date, Temperature, Humidity,
Wind Speed, and Weather Condition (Sunny, Rainy, Cloudy, etc.)

1. Data Generation Task: Using Pandas and NumPy, generate a dummy
dataset with 365 rows (representing days of the year). The Temperature
column should contain random values between 10°C and 40°C, Humidity
values between 30% and 90%, and Wind Speed between 0 and 20 km/h.
The Weather Condition should randomly be assigned one of the three
values: ’Sunny’, ’Rainy’, or ’Cloudy
"""

import numpy as np
import pandas as pd

days=365
date_range=pd.date_range(start='2023-01-01',periods=days)
np.random.seed()

temperature=np.random.uniform(10,40,days).round(1)
humidity=np.random.uniform(0.3,0.9,days).round()
wind_speed=np.random.uniform(0,20,days).round(1)
weather_condition=np.random.choice(['Sunny','Rainy','Cloudy'])

weather_data=pd.DataFrame({
     'Date':date_range,
     'Temperature':temperature,
     'Humidity':humidity,
     'Wind Speed':wind_speed,
     'Weather Condition':weather_condition
})
print(weather_data)

"""2. NumPy Task: Convert the Temperature column into a NumPy array.
Calculate the mean, median, and standard deviation of the temperature
values.
"""

temp_array=weather_data['Temperature'].to_numpy()


temp_mean=np.mean(temp_array)
temp_median=np.median(temp_array)
temp_std=np.std(temp_array)

print('Mean Temperature:',temp_mean)
print('Median Temperature:',temp_median)
print('Standard Deviation of Temperature:',temp_std)

"""3. Pandas Task: Filter the data to find all the days when the temperature
was above 30°C and it was Sunny. How many such days are there?
"""

import pandas as pd
# import numpy as np

# days=365
# date_range=pd.date_range(start='2023-01-01',periods=days)
# np.random.seed()

# temperature=np.random.uniform(10,40,days).round(1)
# humidity=np.random.uniform(0.3,0.9,days).round()
# wind_speed=np.random.uniform(0,20,days).round(1)
# weather_condition=np.random.choice(['Sunny','Rainy','Cloudy'])

# weather_data=pd.DataFrame({
#      'Date':date_range,
#      'Temperature':temperature,
#      'Humidity':humidity,
#      'Wind Speed':wind_speed,
#      'Weather Condition':weather_condition
# })
sunny_days=weather_data.loc[(weather_data['Temperature']>=30) & (weather_data['Weather Condition']=='Sunny')]
print(sunny_days)

"""4. Pandas Task: Group the dataset by Weather Condition and calculate
the average Humidity for each weather condition.
"""

avg_humidity=weather_data.groupby('Weather Condition')['Humidity'].mean()
print(avg_humidity)

"""5. Matplotlib Task: Plot a line graph showing the temperature variation
over the year.

"""

import matplotlib.pyplot as plt

weather_data['Date']=date_range

plt.figure(figsize=(14,7))
plt.plot(weather_data['Date'],weather_data['Temperature'],marker='o',linestyle='-')
plt.title('Temperature Variation over year',fontsize=20)
plt.xlabel('Date' , fontsize=16)
plt.ylabel('Temperature' ,fontsize=16)
plt.grid(True)
plt.show()

"""6. Matplotlib Task: Create a bar plot that shows the number of days for
each weather condition (Sunny, Rainy, Cloudy, etc.).
"""

import matplotlib.pyplot as plt
weather_counts=weather_data['Weather Condition'].value_counts()

plt.figure(figsize=(10,6))
weather_counts.plot(kind='bar',color='skyblue')
plt.title('Number of Days for Each Weather Condition',fontsize=20)
plt.xlabel('Weather Condition',fontsize=16)
plt.ylabel('Number of Days',fontsize=16)
plt.xticks(rotation=0)
plt.show()

"""#  Sales Data Analysis

You are analyzing a dataset for an online store that includes information such
as Order ID, Product, Price, Quantity, and Date of Purchase.

1. Data Generation Task: Generate a dummy dataset with 500 rows. Use
random Product names (choose from 10 different products), random Pricevalues between $10 and $1000, and Quantity values between 1 and 20.
Assign random dates for Date of Purchase within the past year.
"""

import numpy as np
import pandas as pd
from random import choice,randint
from datetime import datetime,timedelta

np.random.seed(5)
rows=1000
product_names=[f"Product {i+1}" for i in range(10)]

data={
    'Order ID':np.arange(1,rows+1),
    'Product':np.random.choice(product_names,rows),
    'Price':np.random.uniform(10,1000,rows).round(2),
    'Quantity':np.random.randint(1,20,rows),
    'Date of Purchase': [(datetime.now() - timedelta(days=np.random.randint(0, 365))).date() for _ in range(rows)]  # Random dates in the past year
}

dummy_data=pd.DataFrame(data)
dummy_data.to_csv('dummy_dataset.csv', index=False)
print(dummy_data)

"""2. NumPy Task: Create a NumPy array containing the Price and Quantity
columns. Compute the total sales for each order (Price * Quantity) using
NumPy
"""

priceArray=dummy_data['Price'].to_numpy()
quantityArray=dummy_data['Quantity'].to_numpy()

total_sales=priceArray*quantityArray
dummy_data['Total Sales']=total_sales
print(dummy_data)

"""3. Pandas Task: Filter the data to show only orders where the total sales
value is greater than $100.
"""

import pandas as pd
filtered=dummy_data[dummy_data['Total Sales']<100]
print(filtered)

"""4. Pandas Task: Group the data by Product and calculate the total quantity sold for each product."""

import pandas as pd
total_quantity=dummy_data.groupby('Product')['Quantity'].sum()
print(total_quantity)

"""5. Matplotlib Task: Create a scatter plot to visualize the relationship
between Price and Quantity of products sold
"""

import matplotlib.pyplot as plt
plt.figure(figsize=(12,7))
plt.scatter(dummy_data['Price'],dummy_data['Quantity'],color='blue',marker='o')
plt.title('Scattered plot between price and quantity' , fontsize=20)
plt.xlabel('Prce' , fontsize=16)
plt.ylabel('Quantity',fontsize=16)
plt.grid(True)
plt.show()

"""6. Matplotlib Task: Create a histogram to show the distribution of total
sales values.
"""

import matplotlib.pyplot as plt

plt.figure(figsize=(15,8))
plt.hist(dummy_data['Total Sales'], bins=20,color='red',edgecolor='black')
plt.title('Histogram of total sales',fontsize=20)
plt.xlabel('Total Sales',fontsize=16)
plt.ylabel('Freq',fontsize=16)
plt.grid(True)
plt.show()

"""```
# This is formatted as code
```

# Employee Salary Analysis

You have a dataset that contains information about employees in a company,
including columns such as Employee ID, Name, Department, Salary, and Years
of Experience

1. Data Generation Task: Generate a dataset with 300 rows. For Employee ID, use sequential integers, for Name, use random names from a list
of 20 names. Assign Department randomly from 5 different departments.
Generate random Salary values between $30,000 and $120,000 and Years
of Experience between 1 and 25.
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt


rows=300
departments=["SALES","IT","HUMAN RESOUCE", "FINANCE" , "MARKETING"]
names=[
    "Ifra","Isha","Khadija","Zainab","Mehak","naveera",
    "Alishba","Afefa","Iraj","Mahrukh","maryam","fiza",
    "hanan","damian","johncena","justin","Zeeshan"
]
np.random.seed(5)

dataset={
    'Employee ID':np.arange(1,rows+1),
    'Name':np.random.choice(names,rows),
    'Department':np.random.choice(departments,rows),
    'Salary' :np.random.uniform(30000,120000,rows).round(2),
    'Years of Experience':np.random.randint(1,25,rows)
 }

data =pd.DataFrame(dataset)
data.to_csv('employee_data.csv',index=False)
print(data)

"""2. NumPy Task: Create a NumPy array with the Salary column. Calculate
the average, maximum, and minimum salary.

"""

import numpy as np

salaryArray=data['Salary'].to_numpy()
avg_salary=np.mean(salaryArray)
max_salary=np.max(salaryArray)
min_salary=np.min(salaryArray)

print('Average Salary:',avg_salary)
print('Maximum Salary:',max_salary)
print('Minimum Salary:',min_salary)

"""3. Pandas Task: Filter the employees who have more than 5 years of experience and earn a salary above the average."""

import pandas as pd

filtered=data[(data['Years of Experience']<5) & (data['Salary']>avg_salary)]
print(filtered)

"""4. Pandas Task: Group the dataset by Department and calculate the mean
salary for each department.
"""

import pandas as pd

meanSalary=data.groupby('Department')['Salary'].mean()
print(meanSalary)

"""5. . Matplotlib Task: Plot a bar chart showing the average salary in each
department.
"""

import matplotlib.pyplot as plt

plt.figure(figsize=(20,10))
plt.bar(meanSalary.index,meanSalary.values,color='pink')
plt.title('Average Salary in Each Department',fontsize=20)
plt.xlabel('Department',fontsize=16)
plt.ylabel('Average Salary',fontsize=16)
plt.grid(True)
plt.show()

"""6. Matplotlib Task: Create a line plot showing the salary distribution for
employees with increasing years of experience.

"""

import matplotlib.pyplot as plt

plt.figure(figsize=(20,10))
plt.plot(data['Years of Experience'],data['Salary'], marker='o',linestyle='-')
plt.title('Salary distiburtion with incresing experience',fontsize=20)
plt.xlabel('Years of Experience',fontsize=16)
plt.ylabel('Salary',fontsize=16)
plt.grid(True)
plt.show()

"""```
`# This is formatted as code`
```

# Exam Score Analysis

You are analyzing the performance of students in an exam. The dataset contains
Student ID, Name, Subject, Score, and Total Marks.

1. Data Generation Task: Generate a dummy dataset with 200 rows. Use
random Student ID, Name, Subject (choose from 5 subjects), and assign
random Score values between 0 and 100, with Total Marks fixed at 100
for all subjects.
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
from random import choice,randint

np.random.seed(4)
subject=[
    "enlish","urdu","pf","islamiyat","oop"
]
name=[
    "Ifra", "Isha", "Khadija", "Zainab", "Mehak", "Naveera",
    "Alishba", "Afefa", "Iraj", "Mahrukh", "Maryam", "Fiza",
    "Hanan", "Damian", "John Cena", "Justin", "Zeeshan"
]
rows=200
exam_data={
    'Student ID':np.arange(1,rows+1),
    'Name': np.random.choice(name,rows),
    'Subject': np.random.choice(subject,rows),
    'Score':np.random.randint(0,100,rows),
    'Total Marks':100
}

exam_data=pd.DataFrame(exam_data)
exam_data.to_csv('exam_data.csv',index=False)
print(exam_data)

"""2. NumPy Task: Using the Score column, calculate the overall mean, median, and standard deviation of the exam scores."""

import numpy as np

overall_mean=exam_data['Score'].mean()
overall_median=exam_data['Score'].median()
overall_std=exam_data['Score'].std()

print('Overall Mean:',overall_mean)
print('Overall Median:',overall_median)
print('Overall Standard Deviation:',overall_std)

"""3. Pandas Task: Filter the students who scored above 80% in the exam.
How many students achieved this score?

"""

import pandas as pd

filtered_students=exam_data[exam_data['Score']>80]
filtered_students.to_csv('filtered_students.csv',index=False)
total=filtered_students.count()
print(filtered_students)
print('Total Students:',total)

"""4. Pandas Task: Group the data by Subject and calculate the average score
for each subject.

"""

import pandas as pd

avg_score=exam_data.groupby('Subject')['Score'].mean()
print(avg_score)

"""5. Matplotlib Task: Plot a histogram showing the distribution of scores
across all students.
"""

import matplotlib.pyplot as plt

plt.figure(figsize=(10,6))
plt.hist(exam_data['Score'],bins=20,color='yellow' ,edgecolor='green')
plt.title('Distribution of Scores',fontsize=20)
plt.xlabel('Score',fontsize=16)
plt.ylabel('Frequency',fontsize=16)

plt.show()

"""6. Matplotlib Task: Create a bar chart to compare the average scores
across different subjects
"""

import matplotlib.pyplot as plt

plt.figure(figsize=(10,6))
plt.bar(avg_score.index,avg_score.values,color='purple')
plt.title('Comparison of average scores across different subjects',fontsize=20,color='red')
plt.xlabel('Subject',fontsize=16)
plt.ylabel('Average Score',fontsize=16)
plt.grid(True)
plt.show()

"""```
# This is formatted as code
```

# Stock Market Analysis

You are working with stock market data containing columns like Date, Open
Price, Close Price, Volume Traded, and Company

1. Data Generation Task: Generate a dataset with 1000 rows. The Date
column should contain random dates for the past two years, and the Company column should contain random selections from 5 companies. Assign
random Open Price and Close Price values between $50 and $500, and
Volume Traded values between 1000 and 1,000,000.
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
from random import choice
from datetime import datetime, timedelta
rows = 1000

companies = ["Netsol", "Devsinc", "LinkedMatrix", "TCS", "Leopard"]
date_today = datetime.now()
start_date = date_today - timedelta(days=365 * 2)

def random_date(start, end):
    return start + timedelta(days=np.random.randint(0, (end - start).days))

stock_data = {
    'Date': [random_date(start_date, date_today) for _ in range(rows)],
    'Company': [choice(companies) for _ in range(rows)],
    'Open Price': np.random.uniform(50, 500, rows).round(2),
    'Close Price': np.random.uniform(50, 500, rows).round(2),
     'Traded Volume': np.random.randint(1000, 1000000, rows)
}

stock_data = pd.DataFrame(stock_data)

stock_data.to_csv('stock_data.csv', index=False)

print(stock_data.head())

"""2. NumPy Task: Convert the Close Price column into a NumPy array.
Calculate the daily percentage change in stock prices
"""

closepriceArray=stock_data['Close Price'].to_numpy()
daily_perectage=np.diff(closepriceArray)/closepriceArray[:-1]*100
print(daily_perectage)

"""3. Pandas Task: Filter the data to find all the days when the stock price
increased by more than 2% compared to the previous day
"""

import pandas as pd

filtered=stock_data[stock_data['Close Price'].pct_change()>0.02]
print(filtered)

"""4. Pandas Task: Group the data by Company and calculate the total Volume Traded for each company"""

total_volume_trade=stock_data.groupby('Company')['Traded Volume'].sum()
print(total_volume_trade)

"""5. Matplotlib Task: Plot a line graph showing the trend of the Close Price
over time for a particular company
"""

import matplotlib.pyplot as plt

plt.figure(figsize=(20,10))
plt.plot(stock_data['Date'],stock_data['Close Price'],marker='o',linestyle='-' ,color='orange')
plt.title('Trend of Close Price over time',fontsize=20)
plt.xlabel('Date',fontsize=16 ,color='green')
plt.ylabel('Close Price',fontsize=16 , color='green')
plt.grid(True)
plt.show()

"""6. Matplotlib Task: Create a bar chart to compare the average percentage
change in Close Price for different companies.
"""

import matplotlib.pyplot as plt
plt.figure(figsize=(20,10))
plt.bar(stock_data['Company'],stock_data['Close Price'].pct_change(),color='pink')
plt.title('Cpmarison',fontsize=30,color='red')
plt.xlabel('Company',fontsize=16,color='blue')
plt.ylabel('Close Price',fontsize=16,color='blue')
plt.show()